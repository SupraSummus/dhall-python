end_of_line: "\n" | "\r\n"
not_end_of_line: (/[\ -􏿿]/ | tab)
tab: "\t"
alpha: /[A-Z]/ | /[a-z]/
digit: /[0-9]/
hexdig: (digit | "A" | "B" | "C" | "D" | "E" | "F")
if: "if"
then: "then"
else: "else"
let: "let"
in: "in"
as: "as"
using: "using"
merge: "merge"
missing: "missing"
some: "Some"
constructors: "constructors"
natural_fold: "Natural/fold"
natural_build: "Natural/build"
natural_iszero: "Natural/isZero"
natural_even: "Natural/even"
natural_odd: "Natural/odd"
natural_tointeger: "Natural/toInteger"
natural_show: "Natural/show"
integer_todouble: "Integer/toDouble"
integer_show: "Integer/show"
double_show: "Double/show"
list_build: "List/build"
list_fold: "List/fold"
list_length: "List/length"
list_head: "List/head"
list_last: "List/last"
list_indexed: "List/indexed"
list_reverse: "List/reverse"
optional_fold: "Optional/fold"
optional_build: "Optional/build"
bool: "Bool"
optional: "Optional"
none: "None"
natural: "Natural"
integer: "Integer"
double: "Double"
text: "Text"
list: "List"
true: "True"
false: "False"
type: "Type"
kind: "Kind"
sort: "Sort"
equal: "="
or: "||"
plus: ("+")
text_append: ("++")
list_append: ("#")
and: ("&&")
times: ("*")
double_equal: ("==")
not_equal: ("!=")
dot: (".")
open_brace: ("{")
close_brace: ("}")
open_bracket: ("[")
close_bracket: ("]")
open_angle: ("<")
close_angle: (">")
bar: ("|")
comma: (",")
open_parens: ("(")
close_parens: (")")
colon: (":")
at: ("@")
import_alt: ("?")
combine: (("\u2227" | "/\\"))
combine_types: (("\u2a53" | "//\\\\"))
prefer: (("\u2afd" | "//"))
lambda: (("\u03bb" | "\\"))
forall: (("\u2200" | "forall"))
arrow: (("\u2192" | "->"))

block_comment: "{-" block_comment_continue
block_comment_chunk: block_comment | /[\ -􏿿]/ | tab | end_of_line
block_comment_continue: "-}" | (block_comment_chunk block_comment_continue)
line_comment: "--" not_end_of_line* end_of_line

whitespace_chunk: " "
_ows: whitespace_chunk*
_ws: whitespace_chunk+

simple_label: (alpha | "_") (alpha | digit | "-" | "/" | "_")*
quoted_label: (alpha | digit | "-" | "/" | "_" | ":" | "." | "$") (alpha | digit | "-" | "/" | "_" | ":" | "." | "$")*
label: simple_label

double_quote_chunk: ("${" expression "}")
                  | ("\\" ("\"" | "$" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | ("u" (hexdig hexdig hexdig hexdig))))
                  | /[\ -!]/
                  | /[\#-\[]/
                  | /[\]-􏿿]/
double_quote_literal: ("\"" (double_quote_chunk*) "\"")
single_quote_continue: "'''" single_quote_continue
                     | "${" complete_expression "}" single_quote_continue
                     | "''${" single_quote_continue
                     | "''"
                     | /[\ -􏿿]/ single_quote_continue
                     | tab single_quote_continue
                     | end_of_line single_quote_continue
single_quote_literal: ("''" single_quote_continue)
text_literal: double_quote_literal | single_quote_literal

reserved: bool | optional | none | natural | integer | double | text | list | true | false | type | kind | sort
reserved_namespaced: natural_fold | natural_build | natural_iszero | natural_even | natural_odd | natural_tointeger | natural_show | integer_todouble | integer_show | double_show | list_build | list_fold | list_length | list_head | list_last | list_indexed | list_reverse | optional_fold | optional_build

exponent: ("e" [("+" | "-")] (digit digit*))
double_literal: [("+" | "-")] (digit digit*) (("." (digit digit*) [exponent]) | exponent)
natural_literal: (digit digit*)
integer_literal: (("+" | "-") natural_literal)

scope_spec: at _ows natural_literal
identifier: label [_ows scope_spec]
identifier_reserved_prefix: reserved _ows (alpha | digit | "-" | "/" | "_") (alpha | digit | "-" | "/" | "_")* [_ows scope_spec]
identifier_reserved_namespaced_prefix: reserved_namespaced _ows (alpha | digit | "-" | "/" | "_") (alpha | digit | "-" | "/" | "_")* [_ows scope_spec]

path_character: (/[!-"]/ | /[\$-']/ | /[\*-\+]/ | /[\--\.]/ | /[0-;]/ | "=" | /[@-Z]/ | /[\^-z]/ | "|" | "~")
path_component: ("/" path_character+)
directory: (path_component*)
file: path_component
local: ((".." directory file) | ("." directory file) | ("~" directory file) | (directory file))

scheme: ("http" ["s"])
http_raw: (scheme "://" authority directory file [("?" query)] [("#" fragment)])
authority: ((host_char*) [(":" port [([(":" (userinfo_char*))] "@" (host_char*) [(":" port)])])])
host_char: (unreserved | pct_encoded | sub_delims)
userinfo_char: (host_char | ":")
port: (digit*)
ip_literal: ("[" (ipv6address | ipvfuture) "]")
ipvfuture: ("v" (hexdig hexdig*) "." ((unreserved | sub_delims | ":") (unreserved | sub_delims | ":")*))
ipv6address: ((((h16 ":") (h16 ":") (h16 ":") (h16 ":") (h16 ":") (h16 ":")) ls32) | ("::" ((h16 ":") (h16 ":") (h16 ":") (h16 ":") (h16 ":")) ls32) | ([h16] "::" ((h16 ":") (h16 ":") (h16 ":") (h16 ":")) ls32) | ([(([(h16 ":") ]) h16)] "::" ((h16 ":") (h16 ":") (h16 ":")) ls32) | ([(([(h16 ":") [(h16 ":") ] ]) h16)] "::" ((h16 ":") (h16 ":")) ls32) | ([(([(h16 ":") [(h16 ":") [(h16 ":") ] ] ]) h16)] "::" h16 ":" ls32) | ([(([(h16 ":") [(h16 ":") [(h16 ":") [(h16 ":") ] ] ] ]) h16)] "::" ls32) | ([(([(h16 ":") [(h16 ":") [(h16 ":") [(h16 ":") [(h16 ":") ] ] ] ] ]) h16)] "::" h16) | ([(([(h16 ":") [(h16 ":") [(h16 ":") [(h16 ":") [(h16 ":") [(h16 ":") ] ] ] ] ] ]) h16)] "::"))
h16: (hexdig [hexdig [hexdig [hexdig ] ] ])
ls32: ((h16 ":" h16) | ipv4address)
ipv4address: (dec_octet "." dec_octet "." dec_octet "." dec_octet)
dec_octet: (digit | (/[1-9]/ digit) | ("1" (digit digit)) | ("2" /[0-4]/ digit) | ("25" /[0-5]/))
reg_name: ((unreserved | pct_encoded | sub_delims)*)
pchar: (unreserved | pct_encoded | sub_delims | ":" | "@")
query: ((pchar | "/" | "?")*)
fragment: ((pchar | "/" | "?")*)
pct_encoded: ("%" hexdig hexdig)
unreserved: (alpha | digit | "-" | "." | "_" | "~")
sub_delims: ("!" | "$" | "&" | "'" | "(" | ")" | "*" | "+" | "," | ";" | "=")
http: http_raw [_ows using _ws (import_hashed | open_parens _ows import_hashed _ows close_parens)]

env: "env:" (bash_environment_variable | "\"" posix_environment_variable "\"")
bash_environment_variable: ((alpha | "_") ((alpha | digit | "_")*))
posix_environment_variable: (posix_environment_variable_character posix_environment_variable_character*)
posix_environment_variable_character: (("\\" ("\"" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v")) | /[\ -!]/ | /[\#-<]/ | /[>-\[]/ | /[\]-\~]/)

import_type: missing
hash: "sha256:" hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig hexdig
import_hashed: import_type [_ows hash]
import: import_hashed [_ows as _ws text]

expression: lambda _ows open_parens _ows label _ows colon _ows expression _ows close_parens _ows arrow _ows expression
          | if _ws expression _ows then _ws expression _ows else _ws expression
          | let _ws label [_ows colon _ows expression] _ows equal _ows expression _ows in _ws expression
          | forall _ows open_parens _ows label _ows colon _ows expression _ows close_parens _ows arrow _ows expression
          | operator_expression _ows arrow _ows expression
          | annotated_expression

annotated_expression: merge _ws import_expression _ows import_expression [_ows colon _ows application_expression]
                    | open_bracket _ows (empty_collection | non_empty_optional)
                    | operator_expression _ows [_ows colon _ows expression]
empty_collection: close_bracket _ows colon _ows (list | optional) _ows import_expression
non_empty_optional: expression _ows close_bracket _ows colon _ows optional _ows import_expression

operator_expression: import_alt_expression
import_alt_expression: or_expression (_ows import_alt _ows or_expression)*
or_expression: plus_expression (_ows or _ows plus_expression)*
plus_expression: text_append_expression (_ows plus _ws text_append_expression)*
text_append_expression: list_append_expression (_ows text_append _ows list_append_expression)*
list_append_expression: and_expression (_ows list_append _ows and_expression)*
and_expression: combine_expression (_ows and _ows combine_expression)*
combine_expression: prefer_expression (_ows combine _ows prefer_expression)*
prefer_expression: combine_types_expression (_ows prefer _ows combine_types_expression)*
combine_types_expression: times_expression (_ows combine_types _ows times_expression)*
times_expression: equal_expression (_ows times _ows equal_expression)*
equal_expression: not_equal_expression (_ows double_equal _ows not_equal_expression)*
not_equal_expression: application_expression (_ows not_equal _ows application_expression)*
application_expression: [(constructors | some) _ws] import_expression (_ws import_expression)*
import_expression: (import | selector_expression)
selector_expression: primitive_expression (_ows dot _ows (label | labels))*
primitive_expression: double_literal | natural_literal | integer_literal | text_literal | (open_brace [_ows (equal | non_empty_record_type_or_literal)] _ows close_brace) | (open_angle [_ows non_empty_union_type_or_literal] _ows close_angle) | non_empty_list_literal | reserved_namespaced | reserved | identifier | (open_parens _ows expression _ows close_parens)

labels: open_brace [_ows label (_ows comma _ows label)*] _ows close_brace
non_empty_record_type_or_literal: (label _ows (non_empty_record_literal | non_empty_record_type))
non_empty_record_type: colon _ows expression (_ows comma _ows label _ows colon _ows expression)*
non_empty_record_literal: equal _ows expression _ows (comma _ows label _ows equal _ows expression)*
non_empty_union_type_or_literal: label _ows ( equal _ows expression (_ows bar _ows label _ows colon _ows expression)*
                                             | colon expression [_ows bar _ows non_empty_union_type_or_literal] )
non_empty_list_literal: open_bracket _ows expression (_ows comma _ows expression)* _ows close_bracket

complete_expression: _ows expression _ows
