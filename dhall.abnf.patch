--- dhall-lang/standard/dhall.abnf	2018-11-12 17:44:28.664899680 +0100
+++ dhall.abnf	2018-11-12 23:19:40.276144176 +0100
@@ -116,9 +116,9 @@
     / line-comment
     / block-comment
 
-whitespace = *whitespace-chunk
+whitespace = "" / whitespace whitespace-chunk
 
-nonempty-whitespace = 1*whitespace-chunk
+nonempty-whitespace = whitespace whitespace-chunk
 
 ; Uppercase or lowercase ASCII letter
 ALPHA = %x41-5A / %x61-7A
@@ -126,7 +126,7 @@
 ; ASCII digit
 DIGIT = %x30-39  ; 0-9
 
-HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
+HEXDIG = DIGIT / %x41-46 / %x61-66
 
 simple-label = (ALPHA / "_") *(ALPHA / DIGIT / "-" / "/" / "_")
 
@@ -237,81 +237,10 @@
 missing-raw           = %x6d.69.73.73.69.6e.67
 Some-raw              = %x53.6f.6d.65
 constructors-raw      = %x63.6f.6e.73.74.72.75.63.74.6f.72.73
-Natural-fold-raw      = %x4e.61.74.75.72.61.6c.2f.66.6f.6c.64
-Natural-build-raw     = %x4e.61.74.75.72.61.6c.2f.62.75.69.6c.64
-Natural-isZero-raw    = %x4e.61.74.75.72.61.6c.2f.69.73.5a.65.72.6f
-Natural-even-raw      = %x4e.61.74.75.72.61.6c.2f.65.76.65.6e
-Natural-odd-raw       = %x4e.61.74.75.72.61.6c.2f.6f.64.64
-Natural-toInteger-raw = %x4e.61.74.75.72.61.6c.2f.74.6f.49.6e.74.65.67.65.72
-Natural-show-raw      = %x4e.61.74.75.72.61.6c.2f.73.68.6f.77
-Integer-toDouble-raw  = %x49.6e.74.65.67.65.72.2f.74.6f.44.6f.75.62.6c.65
-Integer-show-raw      = %x49.6e.74.65.67.65.72.2f.73.68.6f.77
-Double-show-raw       = %x44.6f.75.62.6c.65.2f.73.68.6f.77
-List-build-raw        = %x4c.69.73.74.2f.62.75.69.6c.64
-List-fold-raw         = %x4c.69.73.74.2f.66.6f.6c.64
-List-length-raw       = %x4c.69.73.74.2f.6c.65.6e.67.74.68
-List-head-raw         = %x4c.69.73.74.2f.68.65.61.64
-List-last-raw         = %x4c.69.73.74.2f.6c.61.73.74
-List-indexed-raw      = %x4c.69.73.74.2f.69.6e.64.65.78.65.64
-List-reverse-raw      = %x4c.69.73.74.2f.72.65.76.65.72.73.65
-Optional-fold-raw     = %x4f.70.74.69.6f.6e.61.6c.2f.66.6f.6c.64
-Optional-build-raw    = %x4f.70.74.69.6f.6e.61.6c.2f.62.75.69.6c.64
-Bool-raw              = %x42.6f.6f.6c
 Optional-raw          = %x4f.70.74.69.6f.6e.61.6c
-None-raw              = %x4e.6f.6e.65
-Natural-raw           = %x4e.61.74.75.72.61.6c
-Integer-raw           = %x49.6e.74.65.67.65.72
-Double-raw            = %x44.6f.75.62.6c.65
 Text-raw              = %x54.65.78.74
 List-raw              = %x4c.69.73.74
-True-raw              = %x54.72.75.65
-False-raw             = %x46.61.6c.73.65
-NaN-raw               = %x4e.61.4e
 Infinity-raw          = %x49.6e.66.69.6e.69.74.79
-Type-raw              = %x54.79.70.65
-Kind-raw              = %x4b.69.6e.64
-Sort-raw              = %x53.6f.72.74
-
-reserved-raw =
-    Bool-raw
-  / Optional-raw
-  / None-raw
-  / Natural-raw
-  / Integer-raw
-  / Double-raw
-  / Text-raw
-  / List-raw
-  / True-raw
-  / False-raw
-  / NaN-raw
-  / Infinity-raw
-  / Type-raw
-  / Kind-raw
-  / Sort-raw
-
-reserved-namespaced-raw =
-    Natural-fold-raw
-  / Natural-build-raw
-  / Natural-isZero-raw
-  / Natural-even-raw
-  / Natural-odd-raw
-  / Natural-toInteger-raw
-  / Natural-show-raw
-  / Integer-toDouble-raw
-  / Integer-show-raw
-  / Double-show-raw
-  / List-build-raw
-  / List-fold-raw
-  / List-length-raw
-  / List-head-raw
-  / List-last-raw
-  / List-indexed-raw
-  / List-reverse-raw
-  / Optional-fold-raw
-  / Optional-build-raw
-
-reserved            = reserved-raw            whitespace
-reserved-namespaced = reserved-namespaced-raw whitespace
 
 ; Whitespaced rules for reserved words, to be used when matching expressions
 if           = if-raw           nonempty-whitespace
@@ -370,13 +299,7 @@
 
 natural-literal = natural-raw whitespace
 
-identifier = label [ at natural-raw whitespace ]
-
-identifier-reserved-prefix =
-    reserved-raw 1*(ALPHA / DIGIT / "-" / "/" / "_") whitespace [ at natural-raw whitespace ]
-
-identifier-reserved-namespaced-prefix =
-    reserved-namespaced-raw 1*(ALPHA / DIGIT / "-" / "/" / "_") whitespace [ at natural-raw whitespace ]
+builtin-or-identifier = label / label at natural-raw whitespace
 
 missing = missing-raw whitespace
 
@@ -443,7 +366,7 @@
 
 userinfo = *( unreserved / pct-encoded / sub-delims / ":" )
 
-host = IP-literal / IPv4address / reg-name
+host = IP-literal / reg-name
 
 port = *DIGIT
 
@@ -598,7 +521,8 @@
 annotated-expression =
     ; "merge e1 e2 : t"
     ; "merge e1 e2"
-      merge import-expression import-expression [ colon application-expression ]
+      merge import-expression import-expression
+    / merge import-expression import-expression colon application-expression
 
     ; "[]  : List     t"
     ; "[]  : Optional t"
@@ -607,35 +531,34 @@
     ; NOTE: Backtrack if parsing this alternative fails since we can't tell
     ; from the opening bracket whether or not this will be an empty list or
     ; non-empty list
-    / open-bracket (empty-collection / non-empty-optional)
+    / open-bracket close-bracket colon List import-expression
+    / open-bracket close-bracket colon Optional import-expression
+    / open-bracket expression close-bracket colon Optional import-expression
 
     ; "x : t"
-    / operator-expression (colon expression / "")
-
-empty-collection = close-bracket colon (List / Optional) import-expression
-
-non-empty-optional = expression close-bracket colon Optional import-expression
+    / operator-expression colon expression
+    / operator-expression
 
 operator-expression = import-alt-expression
 
-import-alt-expression    = or-expression            *(import-alt            or-expression)
-or-expression            = plus-expression          *(or                    plus-expression         )
-plus-expression          = text-append-expression   *(plus whitespace-chunk text-append-expression  )
-text-append-expression   = list-append-expression   *(text-append           list-append-expression  )
-list-append-expression   = and-expression           *(list-append           and-expression          )
-and-expression           = combine-expression       *(and                   combine-expression      )
-combine-expression       = prefer-expression        *(combine               prefer-expression       )
-prefer-expression        = combine-types-expression *(prefer                combine-types-expression)
-combine-types-expression = times-expression         *(combine-types         times-expression        )
-times-expression         = equal-expression         *(times                 equal-expression        )
-equal-expression         = not-equal-expression     *(double-equal          not-equal-expression    )
-not-equal-expression     = application-expression   *(not-equal             application-expression  )
+import-alt-expression    = or-expression            / import-alt-expression import-alt or-expression
+or-expression            = plus-expression          / or-expression or plus-expression
+plus-expression          = text-append-expression   / plus-expression plus whitespace-chunk text-append-expression
+text-append-expression   = list-append-expression   / text-append-expression text-append list-append-expression
+list-append-expression   = and-expression           / list-append-expression list-append and-expression
+and-expression           = combine-expression       / and-expression and combine-expression
+combine-expression       = prefer-expression        / combine-expression combine prefer-expression
+prefer-expression        = combine-types-expression / prefer-expression prefer combine-types-expression
+combine-types-expression = times-expression         / combine-types-expression combine-types times-expression
+times-expression         = equal-expression         / times-expression times equal-expression
+equal-expression         = not-equal-expression     / equal-expression double-equal not-equal-expression
+not-equal-expression     = constructors-or-some-expression / not-equal-expression not-equal constructors-or-some-expression
 
 ; Import expressions need to be separated by some whitespace, otherwise there
 ; would be ambiguity: `./ab` could be interpreted as "import the file `./ab`",
 ; or "apply the import `./a` to label `b`"
-application-expression =
-    [ constructors / Some ] import-expression *(whitespace-chunk import-expression)
+constructors-or-some-expression = [ constructors / Some ] application-expression
+application-expression = import-expression / application-expression whitespace-chunk import-expression
 
 import-expression = import / selector-expression
 
@@ -647,7 +570,10 @@
 ; can't tell from parsing just the period whether "foo." will become "foo.bar"
 ; (i.e. accessing field `bar` of the record `foo`) or `foo./bar` (i.e. applying
 ; the function `foo` to the relative path `./bar`)
-selector-expression = primitive-expression *(dot ( label / labels ))
+selector-expression = primitive-expression
+                    / selector-expression dot label
+                    / selector-expression dot open-brace close-brace
+                    / selector-expression dot open-brace label *(comma label) close-brace
 
 ; NOTE: Backtrack when parsing the first three alternatives (i.e. the numeric
 ; literals).  This is because they share leading characters in common
@@ -687,48 +613,26 @@
     ; "[1, 2, 3]"
     / non-empty-list-literal  ; `annotated-expression` handles empty lists
 
-    ; "List/foldWith"
-    / identifier-reserved-namespaced-prefix
-
-    ; "List/head"
-    / reserved-namespaced
-
-    ; "List/map"
-    ; "TypeDefinition"
-    / identifier-reserved-prefix
-
-    ; "List"
-    / reserved
-
     ; "x"
     ; "x@2"
-    / identifier
+    / builtin-or-identifier
 
     ; "( e )"
     / open-parens expression close-parens
 
-labels = open-brace (  label *(comma label) / "" ) close-brace
-
 record-type-or-literal =
       equal                             ; Empty record literal
-    / non-empty-record-type-or-literal
     / ""                                ; Empty record type
-
-non-empty-record-type-or-literal =
-    label (non-empty-record-literal / non-empty-record-type)
-
-non-empty-record-type    = colon expression *(comma label colon expression)
-non-empty-record-literal = equal expression *(comma label equal expression)
+    / label colon expression *(comma label colon expression) ; nonempty record type
+    / label equal expression *(comma label equal expression) ; nonempty record literal
 
 union-type-or-literal =
       non-empty-union-type-or-literal
     / ""                               ; Empty union type
 
 non-empty-union-type-or-literal =
-    label
-    ( equal expression *(bar label colon expression)
-    / colon expression (bar non-empty-union-type-or-literal / "")
-    )
+      label equal expression *(bar label colon expression)
+    / label colon expression (bar non-empty-union-type-or-literal / "")
 
 non-empty-list-literal = open-bracket expression *(comma expression) close-bracket
 
